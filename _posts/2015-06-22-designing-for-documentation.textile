---
layout: post
title: Introducing the sc package
---

h1. {{ page.title }}

p(meta). 22 June 2015 - Austin, TX

<p>I started working on a SuperCollider client package for Google Go in late March of this year. I'm doing this for fun, but also because I love the power of scsynth, loathe programming with sclang, and love programming with Go. In this post I'll talk about where the project is right now and where I'd like it to go. I'm going to assume a fair amount of knowledge about how SuperCollider works, I recommend reading these two pages:
* "Client vs. Server":http://doc.sccode.org/Guides/ClientVsServer.html
* "Unit Generators and Synths":http://doc.sccode.org/Guides/UGens-and-Synths.html
</p>

h2. Why Go?

Go is
# Easy to learn
# Relatively fast

h2. What is a SynthDef?

Every sound that you create with SuperCollider is defined with a synthdef. Here is a synthdef (expressed in sclang) that generates a 440Hz sine tone:
{% highlight javascript %}
SynthDef('simple', {
    Out.ar(0, SinOsc.ar(440));
});
{% endhighlight %}

To tell scsynth about this synthdef you need to send an OSC message that contains a "blob of binary data":http://doc.sccode.org/Reference/Synth-Definition-File-Format.html which describes the structure of the synthdef. This is done by calling a method on the SynthDef object:
{% highlight javascript %}
SynthDef('simple', {
    Out.ar(0, SinOsc.ar(440));
}).add;
{% endhighlight %}

You can then tell scsynth to create a synth node based on the synthdef:
{% highlight javascript %}
x = Synth.new('simple');
{% endhighlight %}

When I first started writing the sc package I wanted synthdefs to look very familiar, which looked like this:
{% highlight go %}
def := NewSynthDef("simple", func(p *Params) {
    return Out.Ar(0, SinOsc.Ar(440));
})
{% endhighlight %}
